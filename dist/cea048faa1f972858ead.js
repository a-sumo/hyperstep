import{EssentiaWASM}from"./essentia.js/dist/essentia-wasm.es.js";let essentiaExtractor=new EssentiaExtractor(EssentiaWASM);function Float32Concat(t,e){var s=t.length,i=new Float32Array(s+e.length);return i.set(t),i.set(e,s),i}class MelspectrogramProcessor extends AudioWorkletProcessor{constructor(t){super(),this._bufferSize=t.processorOptions.bufferSize,this._hopSize=t.processorOptions.hopSize,this._melNumBands=t.processorOptions.melNumBands,this._sampleRate=t.processorOptions.sampleRate,this._channelCount=1,this._extractor=essentiaExtractor,this._extractor.frameSize=this._bufferSize,this._extractor.hopSize=this._hopSize,this._extractor.profile.MelBands.numberBands=this._melNumBands,this._extractor.profile.MelBands.type="power",this._inputRingBuffer=new ChromeLabsRingBuffer(this._bufferSize,this._channelCount),this._outputRingBuffer=new ChromeLabsRingBuffer(this._bufferSize,this._channelCount),this._accumData=[new Float32Array(this._bufferSize)],this._spectrum}process(t,e,s){let i=t[0],r=e[0];if(this._inputRingBuffer.push(i),this._inputRingBuffer.framesAvailable>=this._bufferSize){this._inputRingBuffer.pull(this._accumData),this._spectrum=this._extractor.melSpectrumExtractor(this._accumData[0],this._sampleRate);let t=new Float32Array(128-this._spectrum.length),e=Float32Concat(this._spectrum,t);this._outputRingBuffer.push([e]),this._accumData=[new Float32Array(this._bufferSize)],this._spectrum=null}return this._outputRingBuffer.pull(r),!0}}registerProcessor("melspectrogram-processor",MelspectrogramProcessor);const BYTES_PER_UNIT=Uint16Array.BYTES_PER_ELEMENT,BYTES_PER_SAMPLE=Float32Array.BYTES_PER_ELEMENT,MAX_CHANNEL_COUNT=32,RENDER_QUANTUM_FRAMES=128;class ChromeLabsRingBuffer{constructor(t,e){this._readIndex=0,this._writeIndex=0,this._framesAvailable=0,this._channelCount=e,this._length=t,this._channelData=[];for(let e=0;e<this._channelCount;++e)this._channelData[e]=new Float32Array(t)}get framesAvailable(){return this._framesAvailable}push(t){let e=t[0].length;for(let s=0;s<e;++s){let e=(this._writeIndex+s)%this._length;for(let i=0;i<this._channelCount;++i)this._channelData[i][e]=t[i][s]}this._writeIndex+=e,this._writeIndex>=this._length&&(this._writeIndex=0),this._framesAvailable+=e,this._framesAvailable>this._length&&(this._framesAvailable=this._length)}pull(t){if(0===this._framesAvailable)return;let e=t[0].length;for(let s=0;s<e;++s){let e=(this._readIndex+s)%this._length;for(let i=0;i<this._channelCount;++i)t[i][s]=this._channelData[i][e]}this._readIndex+=e,this._readIndex>=this._length&&(this._readIndex=0),this._framesAvailable-=e,this._framesAvailable<0&&(this._framesAvailable=0)}}