{"version":3,"file":"bundle.fe1647110a5343e4bf2a.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///./src/tests/script.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import '../style.css';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\n\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport {\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHVisualizer,\n\tSAH, CENTER, AVERAGE, getBVHExtremes, estimateMemoryInBytes,\n} from 'three-mesh-bvh';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet scene, camera, renderer, helper, mesh, outputContainer, benchmarkContainer;\nlet benchmarkViz, renderTarget, fsQuad;\nlet mouse = new THREE.Vector2();\nconst readBuffer = new Float32Array( 1 );\n\nconst modelPath = '../assets/models/DragonAttenuation.glb';\nconst params = {\n\n\toptions: {\n\t\tstrategy: SAH,\n\t\tmaxLeafTris: 10,\n\t\tmaxDepth: 40,\n\t\trebuild: function () {\n\n\t\t\tupdateBVH();\n\n\t\t},\n\t},\n\n\tvisualization: {\n\n\t\tdisplayMesh: true,\n\t\tsimpleColors: false,\n\t\toutline: true,\n\t\ttraversalThreshold: 50,\n\n\t},\n\n\tbenchmark: {\n\n\t\tdisplayRays: false,\n\t\tfirstHitOnly: true,\n\t\trotations: 10,\n\t\tcastCount: 1000,\n\n\t}\n\n};\n\nconst BOUNDS_COLOR = 0xffca28;\nconst BG_COLOR = 0x002027;\nconst THRESHOLD_COLOR = 0xe91e63;\n\nclass TraverseMaterial extends THREE.ShaderMaterial {\n\n\tconstructor( params ) {\n\n\t\tsuper( {\n\n\t\t\tuniforms: {\n\t\t\t\tmap: { value: null },\n\t\t\t\tthreshold: { value: 35 },\n\n\t\t\t\tboundsColor: { value: new THREE.Color( 0xffffff ) },\n\t\t\t\tbackgroundColor: { value: new THREE.Color( 0x000000 ) },\n\t\t\t\tthresholdColor: { value: new THREE.Color( 0xff0000 ) },\n\t\t\t\tresolution: { value: new THREE.Vector2() },\n\t\t\t\toutlineAlpha: { value: 0.5 },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D map;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform vec3 thresholdColor;\n\t\t\t\tuniform vec3 boundsColor;\n\t\t\t\tuniform vec3 backgroundColor;\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform float outlineAlpha;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat count = texture2D( map, vUv ).r;\n\t\t\t\t\tif ( count == 0.0 ) {\n\t\t\t\t\t\tvec2 offset = 1.0 / resolution;\n\t\t\t\t\t\tfloat c1 = texture2D( map, vUv + offset * vec2( 1.0, 0.0 ) ).r;\n\t\t\t\t\t\tfloat c2 = texture2D( map, vUv + offset * vec2( - 1.0, 0.0 ) ).r;\n\t\t\t\t\t\tfloat c3 = texture2D( map, vUv + offset * vec2( 0.0, 1.0 ) ).r;\n\t\t\t\t\t\tfloat c4 = texture2D( map, vUv + offset * vec2( 0.0, - 1.0 ) ).r;\n\t\t\t\t\t\tfloat maxC = max( c1, max( c2, max( c3, c4 ) ) );\n\t\t\t\t\t\tif ( maxC != 0.0 ) {\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix( backgroundColor, mix( boundsColor, vec3( 1.0 ), 0.5 ), outlineAlpha );\n\t\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( count > threshold ) {\n\t\t\t\t\t\tgl_FragColor.rgb = thresholdColor.rgb;\n\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfloat alpha = count / threshold;\n\t\t\t\t\t\tvec3 color = mix( boundsColor, vec3( 1.0 ), pow( alpha, 1.75 ) );\n\t\t\t\t\t\tgl_FragColor.rgb = mix( backgroundColor, color, alpha ).rgb ;\n\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\n\t\t} );\n\n\t\tconst uniforms = this.uniforms;\n\t\tfor ( const key in uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.setValues( params );\n\n\t}\n\n}\n\nfunction init() {\n\n\toutputContainer = document.getElementById( 'output' );\n\tbenchmarkContainer = document.getElementById( 'benchmark' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( 0, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// render target\n\trenderTarget = new THREE.WebGLRenderTarget( 1, 1, {\n\t\tformat: THREE.RedFormat,\n\t\ttype: THREE.FloatType,\n\n\t\t// TODO: Use integer buffers once better supported in three.js\n\t\t// format: THREE.RedIntegerFormat,\n\t\t// type: THREE.UnsignedIntType,\n\t\t// internalFormat: 'R16UI'\n\t} );\n\n\tfsQuad = new FullScreenQuad( new TraverseMaterial( {\n\n\t\tmap: renderTarget.texture,\n\t\tdepthWrite: false,\n\n\t} ) );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( - 2.5, 1.5, 2.5 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\twindow.addEventListener( 'resize', onResize, false );\n\tonResize();\n\n\t// Load dragon\n\tconst loader = new GLTFLoader();\n\tloader.load( modelPath, gltf => {\n\n\t\tgltf.scene.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.name === 'Dragon' ) {\n\n\t\t\t\tmesh = c;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tmesh.material = new THREE.MeshBasicMaterial( { colorWrite: false } );\n\t\tmesh.geometry.center();\n\t\tmesh.position.set( 0, 0, 0 );\n\t\tscene.add( mesh );\n\n\t\thelper = new MeshBVHVisualizer( mesh, 40 );\n\t\thelper.displayEdges = false;\n\t\thelper.displayParents = true;\n\t\thelper.color.set( 0xffffff );\n\t\thelper.opacity = 1;\n\t\thelper.depth = 40;\n\n\t\tconst material = helper.meshMaterial;\n\t\tmaterial.blending = THREE.CustomBlending;\n\t\tmaterial.blendDst = THREE.OneFactor;\n\n\t\tscene.add( helper );\n\n\t\tupdateBVH();\n\n\t\trunBenchmark( true );\n\n\t} );\n\n\tbenchmarkViz = new THREE.LineSegments();\n\tbenchmarkViz.material.opacity = 0.1;\n\tbenchmarkViz.material.transparent = true;\n\tbenchmarkViz.material.depthWrite = false;\n\tbenchmarkViz.frustumCulled = false;\n\tscene.add( benchmarkViz );\n\n\tconst gui = new GUI();\n\tconst bvhFolder = gui.addFolder( 'BVH' );\n\tbvhFolder.add( params.options, 'strategy', { CENTER, AVERAGE, SAH } );\n\tbvhFolder.add( params.options, 'maxLeafTris', 1, 30, 1 );\n\tbvhFolder.add( params.options, 'maxDepth', 1, 40, 1 );\n\tbvhFolder.add( params.options, 'rebuild' );\n\tbvhFolder.open();\n\n\tconst vizFolder = gui.addFolder( 'Visualization' );\n\tvizFolder.add( params.visualization, 'displayMesh' );\n\tvizFolder.add( params.visualization, 'simpleColors' );\n\tvizFolder.add( params.visualization, 'outline' );\n\tvizFolder.add( params.visualization, 'traversalThreshold', 1, 300, 1 );\n\tvizFolder.open();\n\n\tconst benchmarkFolder = gui.addFolder( 'Benchmark' );\n\tbenchmarkFolder.add( params.benchmark, 'displayRays' );\n\tbenchmarkFolder.add( params.benchmark, 'firstHitOnly' ).onChange( resetBenchmark );\n\tbenchmarkFolder.add( params.benchmark, 'castCount', 100, 5000, 1 ).onChange( () => {\n\n\t\tresetBenchmark();\n\t\trunBenchmark( true );\n\n\t} );\n\tbenchmarkFolder.add( params.benchmark, 'rotations', 1, 20, 1 ).onChange( () => {\n\n\t\tresetBenchmark();\n\t\trunBenchmark( true );\n\n\t} );\n\tbenchmarkFolder.open();\n\n\twindow.addEventListener( 'pointermove', e => {\n\n\t\tmouse.set( e.clientX, window.innerHeight - e.clientY );\n\n\t} );\n\n}\n\nfunction onResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\n\trenderTarget.setSize(\n\t\twindow.innerWidth * window.devicePixelRatio,\n\t\twindow.innerHeight * window.devicePixelRatio,\n\t);\n\n}\n\nfunction updateBVH() {\n\n\tconst startTime = performance.now();\n\tmesh.geometry.computeBoundsTree( {\n\t\tstrategy: parseInt( params.options.strategy ),\n\t\tmaxLeafTris: params.options.maxLeafTris,\n\t\tmaxDepth: params.options.maxDepth,\n\t} );\n\tconst deltaTime = performance.now() - startTime;\n\thelper.update();\n\n\tresetBenchmark();\n\n\tconst info = getBVHExtremes( mesh.geometry.boundsTree )[ 0 ];\n\toutputContainer.innerText =\n\t\t`construction time        : ${ deltaTime.toFixed( 2 ) }ms\\n` +\n\t\t`surface area score       : ${ info.surfaceAreaScore.toFixed( 2 ) }\\n` +\n\t\t`total nodes              : ${ info.nodeCount }\\n` +\n\t\t`total leaf nodes         : ${ info.leafNodeCount }\\n` +\n\t\t`min / max tris per leaf  : ${ info.tris.min } / ${ info.tris.max }\\n` +\n\t\t`min / max depth          : ${ info.depth.min } / ${ info.depth.max }\\n` +\n\t\t`memory (incl. geometry)  : ${ ( estimateMemoryInBytes( mesh.geometry.boundsTree ) * 1e-6 ).toFixed( 3 ) } mb \\n` +\n\t\t`memory (excl. geometry)  : ${ ( estimateMemoryInBytes( mesh.geometry.boundsTree._roots ) * 1e-6 ).toFixed( 3 ) } mb`;\n\n}\n\nfunction runBenchmark( updateGeom = false ) {\n\n\tlet points = null;\n\tlet newGeometry = null;\n\tif ( updateGeom ) {\n\n\t\tmesh.updateMatrixWorld();\n\t\tnewGeometry = new THREE.BufferGeometry();\n\t\tbenchmarkViz.geometry.dispose();\n\t\tpoints = [];\n\n\t}\n\n\tconst raycaster = new THREE.Raycaster();\n\traycaster.firstHitOnly = params.benchmark.firstHitOnly;\n\n\tconst rayCount = params.benchmark.castCount;\n\tconst rotations = params.benchmark.rotations;\n\tconst { ray } = raycaster;\n\tconst { origin, direction } = ray;\n\n\tconst startTime = performance.now();\n\tfor ( let i = 0; i < rayCount; i ++ ) {\n\n\t\tconst step = i / rayCount;\n\t\tconst y = step - 0.5;\n\t\torigin.set(\n\t\t\tMath.cos( 0.75 * Math.PI * y ) * Math.sin( rotations * 2 * Math.PI * i / rayCount ),\n\t\t\t2 * y,\n\t\t\tMath.cos( 0.75 * Math.PI * y ) * Math.cos( rotations * 2 * Math.PI * i / rayCount ),\n\t\t).multiplyScalar( 2.5 );\n\n\t\tdirection.set(\n\t\t\tMath.cos( rotations * 5 * y ),\n\t\t\tMath.sin( rotations * 10 * y ),\n\t\t\tMath.sin( rotations * 5 * y ),\n\t\t).sub( origin ).normalize();\n\n\t\traycaster.intersectObject( mesh );\n\n\t\tif ( updateGeom ) {\n\n\t\t\tconst hit = raycaster.intersectObject( mesh )[ 0 ];\n\n\t\t\tpoints.push( origin.clone() );\n\t\t\tif ( hit ) {\n\n\t\t\t\tpoints.push( hit.point.clone() );\n\n\t\t\t} else {\n\n\t\t\t\tconst v = new THREE.Vector3();\n\t\t\t\tray.at( 5, v );\n\t\t\t\tpoints.push( v );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst deltaTime = performance.now() - startTime;\n\n\tif ( updateGeom ) {\n\n\t\tnewGeometry.setFromPoints( points );\n\t\tbenchmarkViz.geometry = newGeometry;\n\n\t}\n\n\treturn deltaTime;\n\n}\n\nlet sampleCount = 0;\nlet currTime = 0;\n\nfunction resetBenchmark() {\n\n\tsampleCount = 0;\n\tcurrTime = 0;\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\t// read the buffer from the last frame of rendering so we don't block\n\t// waiting for this frame to finish.\n\tconst pixelRatio = renderer.getPixelRatio();\n\trenderer.readRenderTargetPixels(\n\t\trenderTarget,\n\t\tmouse.x * pixelRatio, mouse.y * pixelRatio, 1, 1,\n\t\treadBuffer,\n\t);\n\n\tif ( mesh ) {\n\n\t\tsampleCount = Math.min( sampleCount + 1, 50 );\n\t\tcurrTime += ( runBenchmark() - currTime ) / sampleCount;\n\t\tbenchmarkContainer.innerText =\n\t\t\t`\\ntraversal depth at mouse : ${ Math.round( readBuffer[ 0 ] ) }\\n` +\n\t\t\t`benchmark rolling avg    : ${ currTime.toFixed( 3 ) } ms`;\n\n\t}\n\n\tif ( params.visualization.simpleColors ) {\n\n\t\tfsQuad.material.boundsColor.set( 0xffffff );\n\t\tfsQuad.material.thresholdColor.set( 0xff0000 );\n\t\tfsQuad.material.backgroundColor.set( 0x000000 );\n\n\t} else {\n\n\t\tfsQuad.material.boundsColor.set( BOUNDS_COLOR );\n\t\tfsQuad.material.thresholdColor.set( THRESHOLD_COLOR );\n\t\tfsQuad.material.backgroundColor.set( BG_COLOR );\n\n\t}\n\n\tfsQuad.material.threshold = params.visualization.traversalThreshold;\n\tfsQuad.material.outlineAlpha = params.visualization.outline ? 0.5 : 0.0;\n\tfsQuad.material.resolution.set( renderTarget.width, renderTarget.height );\n\n\t// render bvh\n\tbenchmarkViz.visible = false;\n\trenderer.autoClear = true;\n\tif ( mesh ) mesh.visible = params.visualization.displayMesh;\n\trenderer.setRenderTarget( renderTarget );\n\trenderer.render( scene, camera );\n\n\trenderer.setRenderTarget( null );\n\tfsQuad.render( renderer );\n\n\t// render rays\n\trenderer.autoClear = false;\n\tbenchmarkViz.visible = params.benchmark.displayRays;\n\n\tif ( mesh ) renderer.render( mesh, camera );\n\trenderer.render( benchmarkViz, camera );\n\n}\n\n\ninit();\nrender();\n\n\n\n\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t178: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [365,659,449], () => (__webpack_require__(235)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","scene","camera","renderer","helper","mesh","outputContainer","benchmarkContainer","benchmarkViz","renderTarget","fsQuad","THREE","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","mouse","readBuffer","Float32Array","params","options","strategy","SAH","maxLeafTris","maxDepth","rebuild","updateBVH","visualization","displayMesh","simpleColors","outline","traversalThreshold","benchmark","displayRays","firstHitOnly","rotations","castCount","TraverseMaterial","constructor","super","uniforms","map","value","threshold","boundsColor","backgroundColor","thresholdColor","resolution","outlineAlpha","vertexShader","fragmentShader","this","key","Object","defineProperty","get","set","v","setValues","onResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","startTime","performance","now","geometry","parseInt","deltaTime","update","resetBenchmark","info","getBVHExtremes","boundsTree","innerText","toFixed","surfaceAreaScore","nodeCount","leafNodeCount","tris","min","max","depth","estimateMemoryInBytes","_roots","runBenchmark","updateGeom","points","newGeometry","updateMatrixWorld","dispose","raycaster","rayCount","ray","origin","direction","i","y","Math","cos","PI","sin","multiplyScalar","sub","normalize","intersectObject","hit","push","clone","point","at","setFromPoints","sampleCount","currTime","document","getElementById","antialias","setClearColor","body","appendChild","domElement","format","type","FullScreenQuad","texture","depthWrite","position","far","OrbitControls","addEventListener","GLTFLoader","load","gltf","traverse","c","isMesh","name","material","colorWrite","center","add","MeshBVHVisualizer","displayEdges","displayParents","color","opacity","meshMaterial","blending","blendDst","transparent","frustumCulled","gui","GUI","bvhFolder","addFolder","CENTER","AVERAGE","open","vizFolder","benchmarkFolder","onChange","e","clientX","clientY","init","render","requestAnimationFrame","pixelRatio","getPixelRatio","readRenderTargetPixels","x","round","width","height","visible","autoClear","setRenderTarget","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","length","fulfilled","j","keys","every","splice","r","d","definition","o","enumerable","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}