{"version":3,"file":"tf-backend-cpu.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/Less.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Sum.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/register_all_kernels.ts","../src/kernels/UnsortedSegmentSum.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype, refCount: 1});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId);\n        this.disposeData(complexTensorInfos.imag.dataId);\n      }\n\n      this.data.delete(dataId);\n    }\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n\n      tensorData.refCount--;\n\n      if (tensorData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n}));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue, bValue));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat, dilations} =\n      attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1, 1];\n  }\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      $dilations, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, dilations, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padLeft;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padTop;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const outBuf = buffer([numSlices, sliceSize], params.dtype);\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsData = backend.data.get(params.dataId).values as TypedArray;\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${params.shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsData[flattenIndex * sliceSize + k];\n    }\n  }\n\n  return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat, dilations} =\n      attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1, 1];\n  }\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      $dilations, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, dilations, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n}));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.8.6';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","_super","_this","data","DataStorage","engine","tslib_1.__extends","MathBackendCPU","values","shape","this","firstUse","env","get","backend_util","warn","dataId","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","_a","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","disposeData","delete","tensorInfo","tensorData","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","KernelBackend","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","inputs","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","_b","a","b","$dtype","_c","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","_d","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset_1","colOffset_1","fromUint8ToStringArray","tIdx","row","resIdx","col","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","lessImpl","less","Less","lessConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","offset","max","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","i_1","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","outDtype","upcastType","prod_1","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","push","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","assertParamsValid","sliceConfig","Slice","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","strides","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","rank","topKImpl","k","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","index","sort","outOffset","topKVals","topKIndices","outputShape","uniqueImpl","$axis","uniqueElements","indices","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","current","addRes","activationRes","bias","intermediates","intermediates_1","_i","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all_1","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","batchSize","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","strides_1","avgPool3DConfig","AvgPool3D","dataFormat","dilations","$dilations","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","prod","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","real_1","imag_1","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","inputShape","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","c","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","top_1","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","trunc","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","eluGradConfig","EluGrad","v","equalImpl","equal","Equal","equalConfig","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","expandDims","dim","inputRank","$dim","splice","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","input_1","getComplexWithIndex","$realInfo","$imagInfo","fftImpl","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","real_2","imag_2","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","fill","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","colOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","oldResult","gatherNdConfig","GatherNd","params","paramsSize","indicesShape","sliceRank","numSlices","indicesData","paramsData","flattenIndex","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","maxPools","pooled","indexes","pooledDataId","indexesDataId","sum_1","sumConfig","Sum","meanConfig","Mean","computeOutAndReduceShapes","toDispose","reduceSizeScalar","minConfig","Min","min_1","mirrorPadConfig","MirrorPad","paddings","mode","end","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event_1","random","seedrandom.alea","sampleId","event_2","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","outputSize","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","sigmoid","Sigmoid","sigmoidConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliced","some","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","outIndex","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","segmentIds","numSegments","numIters","$segmentIds","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs_1","kernelConfig","registerKernel"],"mappings":"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AAO,CAAC5H,MAAO,aAC/C87C,EACFnrC,GAAS,CAACjK,OAAQ,CAACsC,EAAG6yC,EAAY5yC,EAAG1E,GAAIE,YACvCs3C,EACFx/B,GAAI,CAAC7V,OAAQ,CAACnC,EAAGu3C,GAAMr3C,UAASmD,MAAO,CAACgL,KAAM,EAAGC,UAAU,KAC/DxB,EAAI+B,KAAK2oC,GACT7+B,EAAc9J,KAAKwoC,GACnB1+B,EAAc9J,KAAKu1B,GACnBzrB,EAAc9J,KAAKyoC,GACnB3+B,EAAc9J,KAAK0oC,GACnB5+B,EAAc9J,KAAK2oC,GAGrB,IAAMv2C,EAAS8oC,GAAK,CAAC5nC,OAAQ2K,EAAK5M,UAASmD,MAAO,CAACgL,KAAM,KAIzD,OAFAsK,EAActd,SAAQ,SAAAC,GAAK,OAAA4E,EAAQsD,8BAA8BlI,MAE1D2F,SD6PkBw2C,GA5JW,CACpCp/B,GACA3Y,EACAsZ,GACAG,GACA3S,EACA4S,GACAI,GACAQ,GACAG,GACAI,GACAK,GACAG,GACAG,GACAI,GACAG,GACAuF,GACAY,GACAM,GACAqB,GACApL,GACA6L,GACAkB,GACAmB,GACAniB,EACAkE,EACAye,GACArkB,EACAskB,GACAwB,GACAiC,GACAW,GACAb,GACAoC,GACAmB,GACA9B,GACAwC,GACAG,GACAC,GACA+C,GACAW,GACAE,GACAmB,GACAE,GACAI,GACAE,GACAE,GACAyB,GACAT,GACA8C,GACAnkB,GACAkiB,GACAM,GACAgB,GACApuB,EACA0uB,GACAtuB,EACAyzB,GACAQ,GACAE,GACA/zB,EACA00B,GACAC,GACAG,GACAG,GACAU,GACA/0B,EACA81B,GACAt9B,EACAu9B,GACAhZ,GACAoZ,GACAI,GACAE,GACA9sB,GACAvJ,EACAy2B,GACAC,GACAl2B,GACAs2B,GACAI,GACAG,GACAI,GACAC,GACAY,GACAp3B,GACAg4B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAuB,GACAK,GACAr5B,GACAw5B,GACAW,GACAW,GACAz6B,GACAM,GACAm7B,GACAU,GACAK,GACA57B,GACAg8B,GACAU,GACAM,GACAE,GACAM,GACAp2B,GACAnG,GACAw8B,GACAznC,EACA6nC,GACAr2B,GACAG,GACAU,GACAy1B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAa,GACAzhC,GACAkiC,GACAE,GACAU,GACAG,GACAE,GACAE,GACAG,GACAviC,GACAs2B,GACAwM,GACAC,GACAQ,GACAI,GACAQ,GACAC,GACA9jC,GACAmkC,GACAC,GACA7jC,GACA2zB,GACA+Q,GACAG,GACAC,GACAE,GACAzoC,GACA2oC,GACAE,GACAK,GACAnN,IAGyB7wB,aAAAA,KAAe,CAArC,IAAM6+B,UACTC,iBAAeD,iDE1UD"}