/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core"),require("@tensorflow/tfjs-core/dist/ops/ops_for_converter")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core","@tensorflow/tfjs-core/dist/ops/ops_for_converter"],t):t((e=e||self).tf=e.tf||{},e.tf,e.tf)}(this,(function(e,t,a){"use strict";var n,s;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(n||(n={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(s||(s={}));const r={};function o(e){return r[e]}function p(e,a,n,s,r){const o=a.inputParams[e];if(o&&void 0!==o.inputIndexStart){const e=o.inputIndexStart,p=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?e+1:o.inputIndexEnd;if("tensor"===o.type)return i(a.inputNames[o.inputIndexStart],n,s,r);if("tensors"===o.type){return a.inputNames.slice(e,p).map(e=>i(e,n,s,r))}const m=i(a.inputNames.slice(e)[0],n,s,r),u=m.dataSync();return"number"===o.type?u[0]:t.util.toNestedArray(m.shape,u)}const p=a.attrParams[e];return p&&p.value}function i(e,t,a,n){const[s,r]=d(e);if(null!=n){const e=n.getHashTableHandleByName(s);if(null!=e)return e}const o=a.currentContextIds.find(e=>!!t[u(s,e)]);return void 0!==o?t[u(s,o)][r]:void 0}function m(e,t){const[a,n]=d(e);return[u(a,t&&t.currentContextId),n]}function u(e,t){return t?`${e}-${t}`:e}function d(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function c(e,t,a){let n=p("pad",e,t,a);if("explicit"===n){n=p("explicitPaddings",e,t,a);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=n[2*e],s[e][1]=n[2*e+1];return s}return n}function l(e){return e.kept?e:t.clone(e)}var y=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var h=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var f=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var N=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var g=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var x=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var b=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var T=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var _=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}]});var S=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var O=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var w=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var v=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var A=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var D=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var E=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var I=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class k{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[y,h,f,N,g,x,b,O,S,T,w,v,A,D,E,I,_].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const a=e.node,n=[],s=[],r=[],o=a.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e),{});let p=[];const i=[];let u={},d={};null!=t&&(u=this.mapSignatureEntries(t.inputs),d=this.mapSignatureEntries(t.outputs));const c=Object.keys(o);c.forEach(e=>{const t=o[e];t.inputNames.forEach(e=>{const[a]=m(e);t.inputs.push(o[a]),o[a].children.push(t)})}),0===Object.keys(d).length?c.forEach(e=>{const t=o[e];0===t.children.length&&i.push(t)}):Object.keys(d).forEach(e=>{const[t]=m(e),a=o[t];null!=a&&(a.signatureKey=d[e],i.push(a))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{const[t]=m(e),a=o[t];a&&(a.signatureKey=u[e],p.push(a))}):p=n;let l={};null!=e.library&&null!=e.library.function&&(l=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const y={nodes:o,inputs:p,outputs:i,weights:s,placeholders:n,signature:t,functions:l};return r.length>0&&(y.initNodes=r),y}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,a)=>(t[e[a].name]=a,t),{})}mapNode(e){const t=o(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.substr(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce((t,a)=>{const n=a.type;let s=void 0;switch(a.type){case"string":s=V(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=V(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":s=q(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=q(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":s=C(e.attr,a.tfName,a.defaultValue||0),void 0===s&&a.tfDeprecatedName&&(s=C(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":s=B(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=B(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":s=z(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=z(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":s=W(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=W(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":s=j(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=j(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":s=H(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=H(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":s=$(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=$(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":s=P(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=P(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":s=F(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=F(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`)}return t[a.name]={value:s,type:n},t},{})),a}mapFunction(e){const t=e.nodeDef,a=[];let n={};null!=t&&(n=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&a.push(e[t.name]),e),{}));const s=[],r=[];e.signature.inputArg.forEach(e=>{const[t]=m(e.name),a={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:L(e.type),type:"dtype"}},children:[]};a.signatureKey=e.name,s.push(a),n[t]=a}),Object.keys(n).forEach(e=>{const t=n[e];t.inputNames.forEach(e=>{const[a]=m(e);t.inputs.push(n[a]),n[a].children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,a]=m(o[e.name]),s=n[t];null!=s&&(s.defaultOutput=a,r.push(s))});const p=this.mapArgsToSignature(e);return{nodes:n,inputs:s,outputs:r,weights:a,placeholders:[],signature:p}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,a)=>(t[a.name]=this.mapArgToTensorInfo(a,e.ret),t),{})}}mapArgToTensorInfo(e,t){let a=e.name;return null!=t&&(a=t[a]),{name:a,dtype:e.type}}}function M(e,a){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const a=t.env().global;if(void 0!==a.atob)return a.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return a?n:n.toLowerCase()}function V(e,t,a,n=!1){const s=e[t];return null!=s?M(s.s,n):a}function z(e,t,a){const n=e[t];return n?n.b:a}function C(e,t,a){const n=e[t]||{},s=null!=n.i?n.i:null!=n.f?n.f:a;return"number"==typeof s?s:parseInt(s,10)}function L(e){switch("string"==typeof e&&(e=n[e]),e){case n.DT_FLOAT:return"float32";case n.DT_INT32:case n.DT_INT64:case n.DT_INT8:case n.DT_UINT8:return"int32";case n.DT_BOOL:return"bool";case n.DT_DOUBLE:return"float32";case n.DT_STRING:return"string";default:return null}}function F(e,t,a){const n=e[t];return n&&n.func?n.func.name:a}function $(e,t,a){const n=e[t];return n&&n.type?L(n.type):a}function P(e,t,a){const n=e[t];return n&&n.list&&n.list.type?n.list.type.map(e=>L(e)):a}function R(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function j(e,t,a){const n=e[t];return n&&n.shape?R(n.shape):a}function B(e,t,a){const n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):a}function q(e,t,a,n=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>M(e,n)):a}function H(e,t,a){const n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map(e=>R(e)):a}function W(e,t,a){const n=e[t];return n&&n.list&&n.list.b?n.list.b:a}class U{constructor(e,t,a){this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return i(e,this.tensorMap,this.context)}getAttr(e,t){const a=this.node.rawAttrs[e];if(null!=a.tensor)return i(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return C(this.node.rawAttrs,e,t);if(null!=a.s)return V(this.node.rawAttrs,e,t);if(null!=a.b)return z(this.node.rawAttrs,e,t);if(null!=a.shape)return j(this.node.rawAttrs,e,t);if(null!=a.type)return $(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return B(this.node.rawAttrs,e,t);if(null!=a.list.s)return q(this.node.rawAttrs,e,t);if(null!=a.list.shape)return H(this.node.rawAttrs,e,t);if(null!=a.list.b)return W(this.node.rawAttrs,e,t);if(null!=a.list.type)return P(this.node.rawAttrs,e,t)}return t}}function G(e,a,n=""){t.util.assert(function(e,t){if(e.length!==t.length)return!1;for(let a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0}(e,a),()=>n+` Shapes ${e} and ${a} must match`)}class Q{constructor(e,a,n,s,r,o,p){this.name=e,this.dtype=a,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.idTensor=t.scalar(0),t.keep(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,a){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(a.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${a.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=a.shape),G(this.elementShape,a.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=a,t.keep(a),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,a)=>this.write(e,t[a]))}gather(e,a){if(a&&a!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${a}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return t.tensor([],[0].concat(this.elementShape));const n=this.readMany(e);return G(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),t.stack(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return t.tensor([],[0].concat(this.elementShape));const a=[];for(let e=0;e<this.size();e++)a.push(e);const n=this.readMany(a);return G(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),t.concat(n,0)}scatter(e,a){if(a.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${a.dtype}`);if(e.length!==a.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${a.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,t.unstack(a,0))}split(e,a){if(a.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${a.dtype}`);let n=0;const s=e.map(e=>(n+=e,n));if(n!==a.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${a.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:a.size/n,o=[];t.tidy(()=>{a=t.reshape(a,[1,n,r]);for(let n=0;n<e.length;++n){const p=[0,0===n?0:s[n-1],0],i=[1,e[n],r];o[n]=t.reshape(t.slice(a,p,i),this.elementShape)}return o});const p=[];for(let t=0;t<e.length;t++)p[t]=t;this.writeMany(p,o)}}class K{constructor(e,a,n,s=-1){this.tensors=e,this.elementShape=a,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);G(a,e.shape,"TensorList shape mismatch: "),t.keep(e)}),this.idTensor=t.scalar(0),this.maxNumElements=s,t.keep(this.idTensor)}get id(){return this.idTensor.id}copy(){return new K([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,a,n=-1){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return G(e,this.elementShape,"TensorList shape mismatch: "),t.tidy(()=>{const a=this.tensors.map(a=>t.reshape(a,e));return t.stack(a,0)})}popBack(e,a){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return G(n.shape,e,"TensorList shape mismatch: "),t.reshape(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(G(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");t.keep(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,a){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return G(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,a){if(a.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);G(this.elementShape,a.shape,"TensorList shape mismatch: "),t.keep(a),this.tensors[e]=a}gather(e,a,n){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);return G(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?t.tensor([],[0].concat(this.elementShape)):t.tidy(()=>{const a=e.map(e=>t.reshape(this.tensors[e],n));return t.stack(a,0)})}concat(e,a){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return G(this.elementShape,a,"TensorList shape mismatch: "),0===this.size()?t.tensor([],[0].concat(this.elementShape)):t.tidy(()=>{const e=this.tensors.map(e=>t.reshape(e,a));return t.concat(e,0)})}}const X=async(e,a,n)=>{switch(e.op){case"If":case"StatelessIf":{const t=p("thenBranch",e,a,n),s=p("elseBranch",e,a,n),r=p("cond",e,a,n),o=p("args",e,a,n);return(await r.data())[0]?n.functionMap[t].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const t=p("body",e,a,n),s=p("cond",e,a,n),r=p("args",e,a,n),o=await n.functionMap[s].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),i=r.map(e=>e.id);let m=await o[0].data();o.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()});let u=r;for(;m[0];){const e=u;u=await n.functionMap[t].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const a=u.map(e=>e.id);e.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==a.indexOf(e.id)||e.dispose()});const r=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);m=await r[0].data(),r.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==a.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[l(p("pred",e,a,n))];case"Switch":{const t=p("pred",e,a,n);let s=p("data",e,a,n);return s.kept||(s=l(s)),(await t.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const t=e.inputNames.find(e=>void 0!==i(e,a,n));if(t){return[l(i(t,a,n))]}return}case"Enter":{const t=p("frameName",e,a,n),s=p("tensor",e,a,n);return n.enterFrame(t),[l(s)]}case"Exit":{const t=p("tensor",e,a,n);return n.exitFrame(),[l(t)]}case"NextIteration":{const t=p("tensor",e,a,n);return n.nextIteration(),[l(t)]}case"TensorArrayV3":{const s=p("size",e,a,n),r=p("dtype",e,a,n),o=p("elementShape",e,a,n),i=p("dynamicSize",e,a,n),m=p("clearAfterRead",e,a,n),u=p("identicalElementShapes",e,a,n),d=p("name",e,a,n),c=new Q(d,r,s,o,u,i,m);return n.addTensorArray(c),[c.idTensor,t.scalar(1)]}case"TensorArrayWriteV3":{const t=p("tensorArrayId",e,a,n),s=p("index",e,a,n),r=p("tensor",e,a,n),o=n.getTensorArray(t.id);return o.write(s,r),[o.idTensor]}case"TensorArrayReadV3":{const t=p("tensorArrayId",e,a,n),s=p("index",e,a,n);return[n.getTensorArray(t.id).read(s)]}case"TensorArrayGatherV3":{const t=p("tensorArrayId",e,a,n),s=p("indices",e,a,n),r=p("dtype",e,a,n);return[n.getTensorArray(t.id).gather(s,r)]}case"TensorArrayScatterV3":{const t=p("tensorArrayId",e,a,n),s=p("indices",e,a,n),r=p("tensor",e,a,n),o=n.getTensorArray(t.id);return o.scatter(s,r),[o.idTensor]}case"TensorArrayConcatV3":{const t=p("tensorArrayId",e,a,n),s=n.getTensorArray(t.id),r=p("dtype",e,a,n);return[s.concat(r)]}case"TensorArraySplitV3":{const t=p("tensorArrayId",e,a,n),s=p("tensor",e,a,n),r=p("lengths",e,a,n),o=n.getTensorArray(t.id);return o.split(r,s),[o.idTensor]}case"TensorArraySizeV3":{const s=p("tensorArrayId",e,a,n),r=n.getTensorArray(s.id);return[t.scalar(r.size(),"int32")]}case"TensorArrayCloseV3":{const t=p("tensorArrayId",e,a,n),s=n.getTensorArray(t.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const t=p("tensorListId",e,a,n),s=p("index",e,a,n),r=p("tensor",e,a,n),o=n.getTensorList(t.id);return o.setItem(s,r),[o.idTensor]}case"TensorListGetItem":{const t=p("tensorListId",e,a,n),s=p("index",e,a,n),r=p("elementShape",e,a,n),o=p("elementDType",e,a,n);return[n.getTensorList(t.id).getItem(s,r,o)]}case"TensorListScatterV2":case"TensorListScatter":{const s=p("indices",e,a,n),r=function(e,a,n,s){if(a.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${a.length} vs. ${e.shape[0]}`);const r=Math.max(...a);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new K([],n,e.dtype,s),p=t.unstack(e,0);return a.forEach((e,t)=>{o.setItem(e,p[t])}),o}(p("tensor",e,a,n),s,p("elementShape",e,a,n),p("numElements",e,a,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const t=p("elementShape",e,a,n),s=p("elementDType",e,a,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,a){return new K([],e,t,a)}(t,s,p(r,e,a,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const t=p("tensorListId",e,a,n),s=p("indices",e,a,n),r=p("elementShape",e,a,n),o=p("elementDType",e,a,n);return[n.getTensorList(t.id).gather(s,o,r)]}case"TensorListStack":{const t=p("tensorListId",e,a,n),s=p("elementShape",e,a,n),r=p("elementDType",e,a,n),o=p("numElements",e,a,n);return[n.getTensorList(t.id).stack(s,r,o)]}case"TensorListFromTensor":{const s=function(e,a,n){const s=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);G(e.shape.slice(1),a,"TensorList shape mismatch: ");const r=t.unstack(e);return new K(r,a,s)}(p("tensor",e,a,n),p("elementShape",e,a,n),p("elementDType",e,a,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const t=p("tensorListId",e,a,n),s=n.getTensorList(t.id),r=p("dtype",e,a,n),o=p("elementShape",e,a,n);return[s.concat(r,o)]}case"TensorListPushBack":{const t=p("tensorListId",e,a,n),s=p("tensor",e,a,n),r=n.getTensorList(t.id);return r.pushBack(s),[r.idTensor]}case"TensorListPopBack":{const t=p("tensorListId",e,a,n),s=p("elementShape",e,a,n),r=p("elementDType",e,a,n);return[n.getTensorList(t.id).popBack(s,r)]}case"TensorListSplit":{const s=p("tensor",e,a,n),r=p("elementShape",e,a,n),o=function(e,a,n){let s=0;const r=a.map(e=>(s+=e,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const o=0===s?0:e.size/s,p=t.tidy(()=>{const p=[];e=t.reshape(e,[1,s,o]);for(let s=0;s<a.length;++s){const i=[0,0===s?0:r[s-1],0],m=[1,a[s],o];p[s]=t.reshape(t.slice(e,i,m),n)}return e.dispose(),p}),i=new K([],n,e.dtype,a.length);for(let e=0;e<p.length;e++)i.setItem(e,p[e]);return i}(s,p("lengths",e,a,n),r);return n.addTensorList(o),[o.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Z(e,t,a){const[n,s]=p("fusedOps",e,t,a),r="biasadd"===n,o="prelu"===s,i="fusedbatchnorm"===n,m=p("numArgs",e,t,a);if(r){if(o&&2!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(i)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=p("strides",e,t,a),d=c(e,t,a),l=p("dataFormat",e,t,a).toUpperCase(),y=p("dilations",e,t,a),[h,f]=p("args",e,t,a);return{stride:u,pad:d,dataFormat:l,dilations:y,biasArg:h,preluArg:f,activationFunc:s,leakyreluAlpha:p("leakyreluAlpha",e,t,a)}}function Y(e,t,a){return{boxes:p("boxes",e,t,a),scores:p("scores",e,t,a),maxOutputSize:p("maxOutputSize",e,t,a),iouThreshold:p("iouThreshold",e,t,a),scoreThreshold:p("scoreThreshold",e,t,a),softNmsSigma:p("softNmsSigma",e,t,a)}}class J{constructor(e,a){this.keyDType=e,this.valueDType=a,this.handle=t.scalar(0),this.tensorMap=new Map,t.keep(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,a){this.checkKeyAndValueTensor(e,a);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),t.tidy(()=>{const e=t.unstack(a),s=n.length,r=e.length;t.util.assert(s===r,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`);for(let a=0;a<s;a++){const s=n[a],r=e[a];t.keep(r),this.tensorMap.set(s,r)}return this.handle})}async find(e,a){this.checkKeyAndValueTensor(e,a);const n=await e.data();return t.tidy(()=>{const e=[];for(let t=0;t<n.length;t++){const s=n[t],r=this.findWithDefault(s,a);e.push(r)}return t.stack(e)})}findWithDefault(e,t){const a=this.tensorMap.get(e);return null!=a?a:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+e.dtype);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+t.dtype)}}function ee(e,n,s,r){const m=((e,n,s)=>{switch(e.category){case"arithmetic":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[a.add(p("a",e,t,n),p("b",e,t,n))];case"AddN":return[a.addN(p("tensors",e,t,n))];case"FloorMod":case"Mod":return[a.mod(p("a",e,t,n),p("b",e,t,n))];case"Mul":return[a.mul(p("a",e,t,n),p("b",e,t,n))];case"RealDiv":case"Div":return[a.div(p("a",e,t,n),p("b",e,t,n))];case"DivNoNan":return[a.divNoNan(p("a",e,t,n),p("b",e,t,n))];case"FloorDiv":return[a.floorDiv(p("a",e,t,n),p("b",e,t,n))];case"Sub":return[a.sub(p("a",e,t,n),p("b",e,t,n))];case"Minimum":return[a.minimum(p("a",e,t,n),p("b",e,t,n))];case"Maximum":return[a.maximum(p("a",e,t,n),p("b",e,t,n))];case"Pow":return[a.pow(p("a",e,t,n),p("b",e,t,n))];case"SquaredDifference":return[a.squaredDifference(p("a",e,t,n),p("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"basic_math":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[a.abs(p("x",e,t,n))];case"Acos":return[a.acos(p("x",e,t,n))];case"Acosh":return[a.acosh(p("x",e,t,n))];case"Asin":return[a.asin(p("x",e,t,n))];case"Asinh":return[a.asinh(p("x",e,t,n))];case"Atan":return[a.atan(p("x",e,t,n))];case"Atan2":return[a.atan2(p("x",e,t,n),p("y",e,t,n))];case"Atanh":return[a.atanh(p("x",e,t,n))];case"Ceil":return[a.ceil(p("x",e,t,n))];case"Complex":return[a.complex(p("real",e,t,n),p("imag",e,t,n))];case"Cos":return[a.cos(p("x",e,t,n))];case"Cosh":return[a.cosh(p("x",e,t,n))];case"Elu":return[a.elu(p("x",e,t,n))];case"Erf":return[a.erf(p("x",e,t,n))];case"Exp":return[a.exp(p("x",e,t,n))];case"Expm1":return[a.expm1(p("x",e,t,n))];case"Floor":return[a.floor(p("x",e,t,n))];case"Log":return[a.log(p("x",e,t,n))];case"Log1p":return[a.log1p(p("x",e,t,n))];case"Imag":return[a.imag(p("x",e,t,n))];case"Neg":return[a.neg(p("x",e,t,n))];case"Reciprocal":return[a.reciprocal(p("x",e,t,n))];case"Real":return[a.real(p("x",e,t,n))];case"Relu":return[a.relu(p("x",e,t,n))];case"Round":return[a.round(p("x",e,t,n))];case"Selu":return[a.selu(p("x",e,t,n))];case"Sigmoid":return[a.sigmoid(p("x",e,t,n))];case"Sin":return[a.sin(p("x",e,t,n))];case"Sign":return[a.sign(p("x",e,t,n))];case"Sinh":return[a.sinh(p("x",e,t,n))];case"Softplus":return[a.softplus(p("x",e,t,n))];case"Sqrt":return[a.sqrt(p("x",e,t,n))];case"Square":return[a.square(p("x",e,t,n))];case"Tanh":return[a.tanh(p("x",e,t,n))];case"Tan":return[a.tan(p("x",e,t,n))];case"ClipByValue":return[a.clipByValue(p("x",e,t,n),p("clipValueMin",e,t,n),p("clipValueMax",e,t,n))];case"Relu6":return[a.relu6(p("x",e,t,n))];case"Rsqrt":return[a.rsqrt(i(e.inputNames[0],t,n))];case"Prod":return[a.prod(p("x",e,t,n),p("axes",e,t,n))];case"LeakyRelu":return[a.leakyRelu(p("x",e,t,n),p("alpha",e,t,n))];case"Prelu":return[a.prelu(p("x",e,t,n),p("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"control":return X(e,n,s);case"convolution":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=p("stride",e,t,n),r=p("pad",e,t,n),o=p("dataFormat",e,t,n).toUpperCase(),i=p("dilation",e,t,n);return[a.conv1d(p("x",e,t,n),p("filter",e,t,n),s,r,o,i)]}case"Conv2D":{const s=p("strides",e,t,n),r=c(e,t,n),o=p("dataFormat",e,t,n).toUpperCase(),i=p("dilations",e,t,n);return[a.conv2d(p("x",e,t,n),p("filter",e,t,n),[s[1],s[2]],r,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:m,preluArg:u,activationFunc:d,leakyreluAlpha:c}=Z(e,t,n);return[a.fused.conv2d({x:p("x",e,t,n),filter:p("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:m,activation:d,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:m,preluArg:u,activationFunc:d,leakyreluAlpha:c}=Z(e,t,n);return[a.fused.depthwiseConv2d({x:p("x",e,t,n),filter:p("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:m,activation:d,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=p("outputShape",e,t,n),r=p("strides",e,t,n),o=c(e,t,n);return[a.conv2dTranspose(p("x",e,t,n),p("filter",e,t,n),s,[r[1],r[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=p("strides",e,t,n),r=c(e,t,n),o=p("dilations",e,t,n),i=p("dataFormat",e,t,n).toUpperCase();return[a.depthwiseConv2d(p("input",e,t,n),p("filter",e,t,n),[s[1],s[2]],r,i,[o[1],o[2]])]}case"Conv3D":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("dataFormat",e,t,n).toUpperCase(),i=p("dilations",e,t,n);return[a.conv3d(p("x",e,t,n),p("filter",e,t,n),[s[1],s[2],s[3]],r,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("kernelSize",e,t,n);return[a.avgPool(p("x",e,t,n),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("kernelSize",e,t,n);return[a.maxPool(p("x",e,t,n),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("kernelSize",e,t,n),i=p("includeBatchInIndex",e,t,n),{result:m,indexes:u}=a.maxPoolWithArgmax(p("x",e,t,n),[o[1],o[2]],[s[1],s[2]],r,i);return[m,u]}case"AvgPool3D":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("kernelSize",e,t,n);return[a.avgPool3d(p("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("kernelSize",e,t,n);return[a.maxPool3d(p("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=p("strides",e,t,n),r=p("pad",e,t,n),o=p("dilations",e,t,n),i=s[1],m=s[2],u=o[1],d=o[2];return[a.dilation2d(p("x",e,t,n),p("filter",e,t,n),[i,m],r,[u,d],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"creation":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=p("shape",e,t,n),r=p("dtype",e,t,n),o=p("value",e,t,n);return[a.fill(s,o,r)]}case"LinSpace":{const s=p("start",e,t,n),r=p("stop",e,t,n),o=p("num",e,t,n);return[a.linspace(s,r,o)]}case"Multinomial":{const s=p("logits",e,t,n),r=p("numSamples",e,t,n),o=p("seed",e,t,n);return[a.multinomial(s,r,o)]}case"OneHot":{const s=p("indices",e,t,n),r=p("depth",e,t,n),o=p("onValue",e,t,n),i=p("offValue",e,t,n);return[a.oneHot(s,r,o,i)]}case"Ones":return[a.ones(p("shape",e,t,n),p("dtype",e,t,n))];case"OnesLike":return[a.onesLike(p("x",e,t,n))];case"RandomUniform":return[a.randomUniform(p("shape",e,t,n),p("minval",e,t,n),p("maxval",e,t,n),p("dtype",e,t,n))];case"Range":{const s=p("start",e,t,n),r=p("stop",e,t,n),o=p("step",e,t,n);return[a.range(s,r,o,p("dtype",e,t,n))]}case"TruncatedNormal":{const s=p("shape",e,t,n),r=p("mean",e,t,n),o=p("stdDev",e,t,n),i=p("seed",e,t,n);return[a.truncatedNormal(s,r,o,p("dtype",e,t,n),i)]}case"Zeros":return[a.zeros(p("shape",e,t,n),p("dtype",e,t,n))];case"ZerosLike":return[a.zerosLike(p("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:p,scoreThreshold:i,softNmsSigma:m}=Y(e,t,n),u=await a.image.nonMaxSuppressionWithScoreAsync(s,r,o,p,i,m);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:m}=Y(e,t,n),u=p("padToMaxOutputSize",e,t,n),d=await a.image.nonMaxSuppressionPaddedAsync(s,r,o,i,m,u);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:p,scoreThreshold:i}=Y(e,t,n);return[await a.image.nonMaxSuppressionAsync(s,r,o,p,i)]}case"Where":{const s=a.cast(p("condition",e,t,n),"bool"),r=[await a.whereAsync(s)];return s.dispose(),r}case"ListDiff":return a.setdiff1dAsync(p("x",e,t,n),p("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s);case"evaluation":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=p("x",e,t,n),r=p("k",e,t,n),o=p("sorted",e,t,n),i=a.topk(s,r,o);return[i.values,i.indices]}case"Unique":{const s=p("x",e,t,n),r=a.unique(s);return[r.values,r.indices]}case"UniqueV2":{const s=p("x",e,t,n),r=p("axis",e,t,n),o=a.unique(s,r);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"image":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=p("images",e,t,n),r=p("size",e,t,n),o=p("alignCorners",e,t,n),i=p("halfPixelCenters",e,t,n);return[a.image.resizeBilinear(s,[r[0],r[1]],o,i)]}case"ResizeNearestNeighbor":{const s=p("images",e,t,n),r=p("size",e,t,n),o=p("alignCorners",e,t,n),i=p("halfPixelCenters",e,t,n);return[a.image.resizeNearestNeighbor(s,[r[0],r[1]],o,i)]}case"CropAndResize":{const s=p("image",e,t,n),r=p("boxes",e,t,n),o=p("boxInd",e,t,n),i=p("cropSize",e,t,n),m=p("method",e,t,n),u=p("extrapolationValue",e,t,n);return[a.image.cropAndResize(s,r,o,i,m,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"graph":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=p("default",e,t,n);return[i(e.name,t,n)||s];case"Placeholder":return[i(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[l(p("x",e,t,n))];case"IdentityN":return p("x",e,t,n).map(e=>l(e));case"Snapshot":return[l(p("x",e,t,n))];case"Shape":return[a.tensor1d(p("x",e,t,n).shape,"int32")];case"ShapeN":return p("x",e,t,n).map(e=>a.tensor1d(e.shape));case"Size":return[a.scalar(p("x",e,t,n).size,"int32")];case"Rank":return[a.scalar(p("x",e,t,n).rank,"int32")];case"NoOp":return[a.scalar(1)];case"Print":const r=p("x",e,t,n),o=p("data",e,t,n),m=p("message",e,t,n),u=p("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(m);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"logical":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Equal":return[a.equal(p("a",e,t,n),p("b",e,t,n))];case"NotEqual":return[a.notEqual(p("a",e,t,n),p("b",e,t,n))];case"Greater":return[a.greater(p("a",e,t,n),p("b",e,t,n))];case"GreaterEqual":return[a.greaterEqual(p("a",e,t,n),p("b",e,t,n))];case"Less":return[a.less(p("a",e,t,n),p("b",e,t,n))];case"LessEqual":return[a.lessEqual(p("a",e,t,n),p("b",e,t,n))];case"LogicalAnd":return[a.logicalAnd(p("a",e,t,n),p("b",e,t,n))];case"LogicalNot":return[a.logicalNot(p("a",e,t,n))];case"LogicalOr":return[a.logicalOr(p("a",e,t,n),p("b",e,t,n))];case"Select":case"SelectV2":return[a.where(p("condition",e,t,n),p("a",e,t,n),p("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"matrices":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[a.matMul(p("a",e,t,n),p("b",e,t,n),p("transposeA",e,t,n),p("transposeB",e,t,n))];case"Transpose":return[a.transpose(p("x",e,t,n),p("perm",e,t,n))];case"_FusedMatMul":const[s,r]=p("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===r,m=p("numArgs",e,t,n),u=p("leakyreluAlpha",e,t,n);if(o){if(i&&2!==m)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==m)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[d,c]=p("args",e,t,n);return[a.fused.matMul({a:p("a",e,t,n),b:p("b",e,t,n),transposeA:p("transposeA",e,t,n),transposeB:p("transposeB",e,t,n),bias:d,activation:r,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"normalization":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[a.batchNorm(p("x",e,t,n),p("mean",e,t,n),p("variance",e,t,n),p("offset",e,t,n),p("scale",e,t,n),p("epsilon",e,t,n))];case"LRN":return[a.localResponseNormalization(p("x",e,t,n),p("radius",e,t,n),p("bias",e,t,n),p("alpha",e,t,n),p("beta",e,t,n))];case"Softmax":return[a.softmax(p("x",e,t,n))];case"LogSoftmax":return[a.logSoftmax(p("x",e,t,n))];case"SparseToDense":return[a.sparseToDense(p("sparseIndices",e,t,n),p("outputShape",e,t,n),p("sparseValues",e,t,n),p("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"reduction":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Max":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.max(p("x",e,t,n),s,r)]}case"Mean":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.mean(p("x",e,t,n),s,r)]}case"Min":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.min(p("x",e,t,n),s,r)]}case"Sum":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.sum(p("x",e,t,n),s,r)]}case"All":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.all(p("x",e,t,n),s,r)]}case"Any":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.any(p("x",e,t,n),s,r)]}case"ArgMax":{const s=p("axis",e,t,n);return[a.argMax(p("x",e,t,n),s)]}case"ArgMin":{const s=p("axis",e,t,n);return[a.argMin(p("x",e,t,n),s)]}case"Prod":{const s=p("axis",e,t,n),r=p("keepDims",e,t,n);return[a.prod(p("x",e,t,n),s,r)]}case"Cumsum":{const s=p("axis",e,t,n),r=p("exclusive",e,t,n),o=p("reverse",e,t,n);return[a.cumsum(p("x",e,t,n),s,r,o)]}case"Bincount":const s=p("x",e,t,n),r=p("weights",e,t,n),o=p("size",e,t,n);return[a.bincount(s,r,o)];case"DenseBincount":{const s=p("x",e,t,n),r=p("weights",e,t,n),o=p("size",e,t,n),i=p("binaryOutput",e,t,n);return[a.denseBincount(s,r,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"slice_join":return t.tidy(()=>((e,n,s)=>{switch(e.op){case"ConcatV2":case"Concat":{const t=p("n",e,n,s),r=p("axis",e,n,s);let o=p("tensors",e,n,s);return o=o.slice(0,t),[a.concat(o,r)]}case"Gather":{const t=p("x",e,n,s),r=p("indices",e,n,s);return[a.gather(t,a.cast(r,"int32"),0)]}case"GatherV2":{const t=p("axis",e,n,s),r=p("batchDims",e,n,s),o=p("x",e,n,s),i=p("indices",e,n,s);return[a.gather(o,a.cast(i,"int32"),t,r)]}case"Reverse":{const t=p("dims",e,n,s),r=[];for(let e=0;e<t.length;e++)t[e]&&r.push(e);const o=p("x",e,n,s);return[a.reverse(o,r)]}case"ReverseV2":{const t=p("axis",e,n,s),r=p("x",e,n,s);return[a.reverse(r,t)]}case"Slice":{const t=p("begin",e,n,s),r=p("size",e,n,s);return[a.slice(p("x",e,n,s),t,r)]}case"StridedSlice":{const t=p("begin",e,n,s),r=p("end",e,n,s),o=p("strides",e,n,s),i=p("beginMask",e,n,s),m=p("endMask",e,n,s),u=p("ellipsisMask",e,n,s),d=p("newAxisMask",e,n,s),c=p("shrinkAxisMask",e,n,s),l=p("x",e,n,s);return[a.stridedSlice(l,t,r,o,i,m,u,d,c)]}case"Pack":return t.tidy(()=>{const r=p("axis",e,n,s),o=p("tensors",e,n,s),i=o[0].shape,m=a.squeeze(o[0]).shape,u=o.map(e=>{const n=t.util.arraysEqual(e.shape,i);if(!n&&!t.util.arraysEqual(a.squeeze(e).shape,m))throw new Error("the input tensors shape does not match");return n?e:a.reshape(e,i)});return[a.stack(u,r)]});case"Unpack":{const t=p("axis",e,n,s),r=p("tensor",e,n,s);return a.unstack(r,t)}case"Tile":{const t=p("reps",e,n,s);return[a.tile(p("x",e,n,s),t)]}case"Split":case"SplitV":{const t=p("axis",e,n,s),r=p("numOrSizeSplits",e,n,s),o=p("x",e,n,s);return a.split(o,r,t)}case"ScatterNd":{const t=p("indices",e,n,s),r=p("values",e,n,s),o=p("shape",e,n,s);return[a.scatterND(t,r,o)]}case"GatherNd":{const t=p("x",e,n,s),r=p("indices",e,n,s);return[a.gatherND(t,r)]}case"SparseToDense":{const t=p("sparseIndices",e,n,s),r=p("outputShape",e,n,s),o=p("sparseValues",e,n,s),i=p("defaultValue",e,n,s);return[a.sparseToDense(t,o,r,o.dtype===i.dtype?i:a.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"spectral":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"FFT":return[a.fft(p("x",e,t,n))];case"IFFT":return[a.ifft(p("x",e,t,n))];case"RFFT":return[a.rfft(p("x",e,t,n))];case"IRFFT":return[a.irfft(p("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"transformation":return t.tidy(()=>((e,t,n)=>{switch(e.op){case"Cast":return[a.cast(p("x",e,t,n),p("dtype",e,t,n))];case"ExpandDims":{const s=p("axis",e,t,n);return[a.expandDims(p("x",e,t,n),s)]}case"Squeeze":{const s=p("axis",e,t,n);return[a.squeeze(p("x",e,t,n),s)]}case"Reshape":return[a.reshape(p("x",e,t,n),p("shape",e,t,n))];case"MirrorPad":return[a.mirrorPad(p("x",e,t,n),p("padding",e,t,n),p("mode",e,t,n))];case"PadV2":case"Pad":return[a.pad(p("x",e,t,n),p("padding",e,t,n),p("constantValue",e,t,n))];case"SpaceToBatchND":{const s=p("blockShape",e,t,n),r=p("paddings",e,t,n);return[a.spaceToBatchND(p("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=p("blockShape",e,t,n),r=p("crops",e,t,n);return[a.batchToSpaceND(p("x",e,t,n),s,r)]}case"DepthToSpace":{const s=p("blockSize",e,t,n),r=p("dataFormat",e,t,n).toUpperCase();return[a.depthToSpace(p("x",e,t,n),s,r)]}case"BroadcastTo":return[a.broadcastTo(p("x",e,t,n),p("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s));case"hash_table":return(async(e,t,a,n)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=p("keyDType",e,t,a),r=p("valueDType",e,t,a),o=new J(s,r);return n.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=p("tableHandle",e,t,a,n),r=p("keys",e,t,a),o=p("values",e,t,a),i=n.getHashTableById(s.id);return[await i.import(r,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=p("tableHandle",e,t,a,n),r=p("keys",e,t,a),o=p("defaultValue",e,t,a),i=n.getHashTableById(s.id);return[await i.find(r,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,s,r);case"custom":const m=o(e.op);if(m&&m.customExecutor)return m.customExecutor(new U(e,n,s));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,n,s);return t.util.isPromise(m)?m.then(e=>[].concat(e)):[].concat(m)}class te{constructor(e={},t={},a={},n={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=a,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ae(e,t,a,n){const s=new Set,r=[];let o=null,p=null;const i=new Set,m=Object.keys(e).map(e=>d(e)[0]);let u=[];null!=n&&(u=n.map(e=>d(e.name)[0]));const c=[...t];for(;c.length>0;){const e=c.pop();(oe(e)||pe(e)||ie(e))&&null==o&&(o=e,p=o.children.map(e=>e.name).filter(e=>s.has(e))),s.add(e.name),null==a[e.name]&&(-1===m.indexOf(e.name)&&-1===u.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{i.has(e.name)||(i.add(e.name),c.push(e))}):r.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:r,dynamicNode:o,syncInputs:p}}const ne=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],se=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],re=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function oe(e){return ne.indexOf(e.op)>=0}function pe(e){return se.indexOf(e.op)>=0}function ie(e){return re.indexOf(e.op)>=0}class me{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new me(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const a=e.map(e=>e.name).sort(),n=t.map(e=>e.name).sort();return a.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(e,t){const a=ae(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:r}=a;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(n.length>0){const a=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${s}]. Missing the following inputs: [${n}]`)}return function(e,t,a){const{usedNodes:n,inputs:s}=a,r=[],o=Object.keys(s).map(e=>d(e)[0]).map(t=>e.nodes[t]),p=e.initNodes;o.forEach(e=>{n.has(e.name)&&r.push(e)}),e.weights.forEach(e=>{n.has(e.name)&&r.push(e)}),null!=p&&p.forEach(e=>{n.has(e.name)&&r.push(e)});const i=new Set,m=[];for(;r.length>0;){const e=r.pop();i.add(e.name),t[e.name]||m.push(e),e.children.forEach(e=>{!i.has(e.name)&&n.has(e.name)&&e.inputs.every(e=>i.has(e.name))&&r.push(e)})}return m}(this.graph,this.weightMap,a)}execute(e,a){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),a=this.mapOutputs(a),this.checkOutputs(a);const s=n.map(e=>this.graph.nodes[d(e)[0]]),r=a.map(e=>d(e)[0]);let o=r.map(e=>this.graph.nodes[e]);0===o.length&&(o=this._outputs);const p=this.getCompilationKey(s,o);let m=this.compiledMap.get(p);null==m&&(m=this.compile(e,o),this.compiledMap.set(p,m));const u={},c={};return t.tidy(()=>{const n=new te(this.weightMap,u,c,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[a,n]=d(t),r=[];r[n]=e[t],s[a]=r});const o=this.getFrozenTensorIds(s),p={};for(let e=0;e<m.length;e++){const a=m[e];if(!s[a.name]){const e=ee(a,s,n,this._resourceManager);if(t.util.isPromise(e))throw new Error(`The execution of the op '${a.op}' returned a promise. Please use model.executeAsync() instead.`);s[a.name]=e,this.checkTensorForDisposal(a.name,a,s,n,o,r,p)}}return null==this.parent&&n.dispose(o),a.map(e=>i(e,s,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,a,n,s,r,o){"control"!==t.category&&-1===r.indexOf(e)&&(a[e].forEach(e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const t=function(e,t,a){return t[u(e,a.currentContextId)]}(e.name,a,n);null!=t&&t.forEach(e=>{if(e&&!s.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,a=!1,n={},s={}){a||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const r=new te(this.weightMap,n,s,this.functionExecutorMap),o=await this.executeWithControlFlow(e,r,t,a),p=t.map(e=>i(e,o,r)),m=p.map(e=>e.id),u=Object.keys(e).map(t=>e[t].id),d=new Set([...m,...u,...this.weightIds]);return Object.keys(o).forEach(e=>{o[e].forEach(e=>{!e||e.isDisposed||d.has(e.id)||e.dispose()})}),null==this.parent&&r.dispose(d),p}async executeFunctionAsync(e,t,a){const n=e.reduce((e,t,a)=>(e[this.inputs[a].name]=t,e),{});return this._executeAsync(n,this.outputNodes,!0,t,a)}async executeWithControlFlow(e,t,a,n){const s=Object.keys(e),r=s.map(e=>this.graph.nodes[d(e)[0]]),o=a.map(e=>d(e)[0]);let p=o.map(e=>this.graph.nodes[e]);0===p.length&&(p=this._outputs);const{usedNodes:m,missingInputs:u,dynamicNode:c,syncInputs:l}=ae(e,p,this.weightMap,this._initNodes),y=[...r,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),h=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[a,n]=d(t),s=[];s[n]=e[t],h[a]=s});const f={},N=this.getFrozenTensorIds(h),g={};for(;y.length>0;){const e=this.processStack(r,y,t,h,g,N,o,f,m);await Promise.all(e)}null!=c||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=p.filter(e=>!oe(e)&&!i(e.name,h,t)).map(e=>e.name);if(x.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${l}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`)}return h}processStack(e,a,n,s,r,o,i,u,d){const c=[];for(;a.length>0;){const e=a.pop();n.currentContext=e.contexts;let l="";if("Enter"===e.node.op&&p("isConstant",e.node,s,n)&&([l]=m(e.node.name,n)),null==s[e.node.name]){const p=ee(e.node,s,n,this._resourceManager);l||([l]=m(e.node.name,n));const y=n.currentContext;t.util.isPromise(p)?c.push(p.then(t=>(s[l]=t,n.currentContext=y,this.checkTensorForDisposal(l,e.node,s,n,o,i,u),this.processChildNodes(e.node,a,n,s,r,d),t))):(s[l]=p,this.checkTensorForDisposal(l,e.node,s,n,o,i,u),this.processChildNodes(e.node,a,n,s,r,d))}else this.processChildNodes(e.node,a,n,s,r,d)}return c}processChildNodes(e,t,a,n,s,r){e.children.forEach(e=>{const[o]=m(e.name,a);!s[o]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!i(e,n,a))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(e=>!!i(e,n,a))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(a=>{const n=e[a],[s]=d(a),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,a=e.length===n.shape.length&&n.shape.every((t,a)=>-1===e[a]||e[a]===t);t.util.assert(a,()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}r.attrParams.dtype&&r.attrParams.dtype.value&&t.util.assert(n.dtype===r.attrParams.dtype.value,()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){const t={};for(const a in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a]){t[this._signature.inputs[a].name]=e[a]}else t[a]=e[a];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=d(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e},{})}checkOutputs(e){e.forEach(e=>{const[t]=d(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class ue{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class de{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new ue}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=t.io.browserHTTPRequest(e,this.loadOptions);else{const a=t.io.getLoadHandlers(e,this.loadOptions);if(0===a.length)a.push(t.io.browserHTTPRequest(e,this.loadOptions));else if(a.length>1)throw new Error(`Found more than one (${a.length}) load handlers for URL '${[e]}'`);this.handler=a[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const a=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${a.versions.producer}.${a.versions.minConsumer}`;const s=t.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new me(k.Instance.transformGraph(a,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=k.Instance.transformGraph(e.modelInitializer);this.initializer=new me(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,a){if("string"==typeof e){const a=t.io.getSaveHandlers(e);if(0===a.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(a.length>1)throw new Error(`Found more than one (${a.length}) save handlers for URL '${e}'`);e=a[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof t.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,a,n)=>(t[a]=e[n],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=this.executor.execute(e,t);return a.length>1?a:a[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=await this.executor.executeAsync(e,t);return a.length>1?a:a[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,a)=>(t[a]=[e[a]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}e.GraphModel=de,e.deregisterOp=function(e){delete r[e]},e.loadGraphModel=async function(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e+="model.json?tfjs-format=file");const a=new de(e,t);return await a.load(),a},e.registerOp=function(e,t){const a={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};r[e]=a},e.version_converter="2.8.6",Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=tf-converter.es2017.min.js.map
