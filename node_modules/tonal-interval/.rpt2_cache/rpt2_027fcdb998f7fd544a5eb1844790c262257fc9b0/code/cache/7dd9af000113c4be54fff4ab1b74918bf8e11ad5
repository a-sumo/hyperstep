{"code":"var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nexport var names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nexport var tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nexport var qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nexport var altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nexport function props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nexport var num = function (str) { return props(str).num; };\r\nexport var name = function (str) { return props(str).name; };\r\nexport var semitones = function (str) { return props(str).semitones; };\r\nexport var chroma = function (str) { return props(str).chroma; };\r\nexport var ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nexport var build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nexport var simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nexport var invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nexport var fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\r\n","dts":{"name":"/Users/dani/Code/Tonal/tonal/packages/interval/index.d.ts","writeByteOrderMark":false,"text":"declare type IntervalName = string;\r\ndeclare type IntervalQuality = \"dddd\" | \"ddd\" | \"dd\" | \"d\" | \"m\" | \"M\" | \"P\" | \"A\" | \"AA\" | \"AAA\" | \"AAAA\";\r\ndeclare type IntervalAlteration = number;\r\ndeclare type IntervalStep = number;\r\ndeclare type IntervalDirection = 1 | -1;\r\ndeclare type IntervalSimplifiedNumber = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\ndeclare type IntervalType = \"P\" | \"M\";\r\ndeclare type IntervalChroma = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\r\ndeclare type IntervalClass = 0 | 1 | 2 | 3 | 4 | 5;\r\ndeclare type IntervalProps = {\r\n    name: IntervalName;\r\n    num: number;\r\n    q: IntervalQuality;\r\n    step: IntervalStep;\r\n    alt: IntervalAlteration;\r\n    dir: IntervalDirection;\r\n    type: IntervalType;\r\n    simple: IntervalSimplifiedNumber;\r\n    semitones: number;\r\n    chroma: IntervalChroma;\r\n    oct: number;\r\n    ic: IntervalClass;\r\n};\r\ndeclare type NoIntervalProps = {\r\n    name: null;\r\n    num: null;\r\n    q: null;\r\n    step: null;\r\n    alt: null;\r\n    dir: null;\r\n    type: null;\r\n    simple: null;\r\n    semitones: null;\r\n    chroma: null;\r\n};\r\nexport declare const names: (types?: string | string[] | undefined) => string[];\r\nexport declare const tokenize: (str?: string | undefined) => [string, string] | null;\r\nexport declare const qToAlt: (type: string, q: string) => number | null;\r\nexport declare const altToQ: (type: string, alt: number) => string | null;\r\nexport declare function props(str?: string): IntervalProps | NoIntervalProps;\r\nexport declare const num: (str: string) => number | null;\r\nexport declare const name: (str: string) => string | null;\r\nexport declare const semitones: (str: string) => number | null;\r\nexport declare const chroma: (str: string) => 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | null;\r\nexport declare const ic: (ivl?: string | number | null | undefined) => number | null;\r\nexport declare const build: ({ num, step, alt, oct, dir }?: Partial<IntervalProps>) => string | null;\r\nexport declare const simplify: (str: string) => string | null;\r\nexport declare const invert: (str: string) => string | null;\r\nexport declare const fromSemitones: (num: number) => string;\r\nexport {};\r\n"}}
